$date
    Mar 22, 2014  19:29:34
$end
$version
    TOOL:	ncsim	10.20-s120
$end
$timescale
    100 ps
$end

$scope module Decode $end
$var wire      1 !    reset  $end
$var wire      1 !    clk  $end
$var wire      1 !    fs2Ready_i  $end
$var wire      1 !    inst0PacketValid_i  $end
$var wire     133 "    inst0Packet_i [132:0] $end
$var wire      1 !    inst1PacketValid_i  $end
$var wire     133 #    inst1Packet_i [132:0] $end
$var wire      1 !    inst2PacketValid_i  $end
$var wire     133 $    inst2Packet_i [132:0] $end
$var wire      1 !    inst3PacketValid_i  $end
$var wire     133 %    inst3Packet_i [132:0] $end
$var wire      1 &    decodeReady_o  $end
$var wire      8 '    decodedVector_o [7:0] $end
$var wire     126 (    decodedPacket0_o [125:0] $end
$var wire     126 )    decodedPacket1_o [125:0] $end
$var wire     126 *    decodedPacket2_o [125:0] $end
$var wire     126 +    decodedPacket3_o [125:0] $end
$var wire     126 ,    decodedPacket4_o [125:0] $end
$var wire     126 -    decodedPacket5_o [125:0] $end
$var wire     126 .    decodedPacket6_o [125:0] $end
$var wire     126 /    decodedPacket7_o [125:0] $end
$var wire      1 0    decodedPacketValid [7] $end
$var wire      1 1    decodedPacketValid [6] $end
$var wire      1 2    decodedPacketValid [5] $end
$var wire      1 3    decodedPacketValid [4] $end
$var wire      1 4    decodedPacketValid [3] $end
$var wire      1 5    decodedPacketValid [2] $end
$var wire      1 6    decodedPacketValid [1] $end
$var wire      1 7    decodedPacketValid [0] $end
$var reg       8 8    decodedVector [7:0] $end

$scope module decode0_PISA $end
$var wire      1 !    instPacketValid_i  $end
$var wire     133 "    instPacket_i [132:0] $end
$var wire      1 7    decodedPacket0Valid_o  $end
$var wire     126 9    decodedPacket0_o [125:0] $end
$var wire      1 6    decodedPacket1Valid_o  $end
$var wire     126 :    decodedPacket1_o [125:0] $end
$var wire     64 ;    instruction [63:0] $end
$var wire     32 <    pc [31:0] $end
$var wire     32 =    preTargetAddr [31:0] $end
$var wire      4 >    ctiTag [3:0] $end
$var wire      1 ?    preBranchDir  $end
$var wire     32 @    opcode [31:0] $end
$var reg       1 A    valid_0  $end
$var reg      32 B    opcode_0 [31:0] $end
$var reg       7 C    instLogical1_0 [6:0] $end
$var reg       7 D    instLogical2_0 [6:0] $end
$var reg       7 E    instDest_0 [6:0] $end
$var reg       2 F    instSrcHL_0 [1:0] $end
$var reg       2 G    instDestHL_0 [1:0] $end
$var reg      17 H    instImmediate_0 [16:0] $end
$var reg      32 I    instTarget_0 [31:0] $end
$var reg       2 J    instFU_0 [1:0] $end
$var reg       2 K    instldstSize_0 [1:0] $end
$var reg       1 L    instLoad_0  $end
$var reg       1 M    instStore_0  $end
$var reg       1 N    instbranch_0  $end
$var reg       1 O    valid_1  $end
$var reg      32 P    opcode_1 [31:0] $end
$var reg       7 Q    instLogical1_1 [6:0] $end
$var reg       7 R    instLogical2_1 [6:0] $end
$var reg       7 S    instDest_1 [6:0] $end
$var reg       2 T    instSrcHL_1 [1:0] $end
$var reg       2 U    instDestHL_1 [1:0] $end
$var reg      17 V    instImmediate_1 [16:0] $end
$var reg      32 W    instTarget_1 [31:0] $end
$var reg       2 X    instFU_1 [1:0] $end
$var reg       2 Y    instldstSize_1 [1:0] $end
$var reg       1 Z    instLoad_1  $end
$var reg       1 [    instStore_1  $end
$var reg       1 \    instbranch_1  $end
$upscope $end


$scope module decode1_PISA $end
$var wire      1 !    instPacketValid_i  $end
$var wire     133 #    instPacket_i [132:0] $end
$var wire      1 5    decodedPacket0Valid_o  $end
$var wire     126 ]    decodedPacket0_o [125:0] $end
$var wire      1 4    decodedPacket1Valid_o  $end
$var wire     126 ^    decodedPacket1_o [125:0] $end
$var wire     64 _    instruction [63:0] $end
$var wire     32 `    pc [31:0] $end
$var wire     32 a    preTargetAddr [31:0] $end
$var wire      4 b    ctiTag [3:0] $end
$var wire      1 c    preBranchDir  $end
$var wire     32 d    opcode [31:0] $end
$var reg       1 e    valid_0  $end
$var reg      32 f    opcode_0 [31:0] $end
$var reg       7 g    instLogical1_0 [6:0] $end
$var reg       7 h    instLogical2_0 [6:0] $end
$var reg       7 i    instDest_0 [6:0] $end
$var reg       2 j    instSrcHL_0 [1:0] $end
$var reg       2 k    instDestHL_0 [1:0] $end
$var reg      17 l    instImmediate_0 [16:0] $end
$var reg      32 m    instTarget_0 [31:0] $end
$var reg       2 n    instFU_0 [1:0] $end
$var reg       2 o    instldstSize_0 [1:0] $end
$var reg       1 p    instLoad_0  $end
$var reg       1 q    instStore_0  $end
$var reg       1 r    instbranch_0  $end
$var reg       1 s    valid_1  $end
$var reg      32 t    opcode_1 [31:0] $end
$var reg       7 u    instLogical1_1 [6:0] $end
$var reg       7 v    instLogical2_1 [6:0] $end
$var reg       7 w    instDest_1 [6:0] $end
$var reg       2 x    instSrcHL_1 [1:0] $end
$var reg       2 y    instDestHL_1 [1:0] $end
$var reg      17 z    instImmediate_1 [16:0] $end
$var reg      32 {    instTarget_1 [31:0] $end
$var reg       2 |    instFU_1 [1:0] $end
$var reg       2 }    instldstSize_1 [1:0] $end
$var reg       1 ~    instLoad_1  $end
$var reg       1 !!   instStore_1  $end
$var reg       1 "!   instbranch_1  $end
$upscope $end


$scope module decode2_PISA $end
$var wire      1 !    instPacketValid_i  $end
$var wire     133 $    instPacket_i [132:0] $end
$var wire      1 3    decodedPacket0Valid_o  $end
$var wire     126 #!   decodedPacket0_o [125:0] $end
$var wire      1 2    decodedPacket1Valid_o  $end
$var wire     126 $!   decodedPacket1_o [125:0] $end
$var wire     64 %!   instruction [63:0] $end
$var wire     32 &!   pc [31:0] $end
$var wire     32 '!   preTargetAddr [31:0] $end
$var wire      4 (!   ctiTag [3:0] $end
$var wire      1 )!   preBranchDir  $end
$var wire     32 *!   opcode [31:0] $end
$var reg       1 +!   valid_0  $end
$var reg      32 ,!   opcode_0 [31:0] $end
$var reg       7 -!   instLogical1_0 [6:0] $end
$var reg       7 .!   instLogical2_0 [6:0] $end
$var reg       7 /!   instDest_0 [6:0] $end
$var reg       2 0!   instSrcHL_0 [1:0] $end
$var reg       2 1!   instDestHL_0 [1:0] $end
$var reg      17 2!   instImmediate_0 [16:0] $end
$var reg      32 3!   instTarget_0 [31:0] $end
$var reg       2 4!   instFU_0 [1:0] $end
$var reg       2 5!   instldstSize_0 [1:0] $end
$var reg       1 6!   instLoad_0  $end
$var reg       1 7!   instStore_0  $end
$var reg       1 8!   instbranch_0  $end
$var reg       1 9!   valid_1  $end
$var reg      32 :!   opcode_1 [31:0] $end
$var reg       7 ;!   instLogical1_1 [6:0] $end
$var reg       7 <!   instLogical2_1 [6:0] $end
$var reg       7 =!   instDest_1 [6:0] $end
$var reg       2 >!   instSrcHL_1 [1:0] $end
$var reg       2 ?!   instDestHL_1 [1:0] $end
$var reg      17 @!   instImmediate_1 [16:0] $end
$var reg      32 A!   instTarget_1 [31:0] $end
$var reg       2 B!   instFU_1 [1:0] $end
$var reg       2 C!   instldstSize_1 [1:0] $end
$var reg       1 D!   instLoad_1  $end
$var reg       1 E!   instStore_1  $end
$var reg       1 F!   instbranch_1  $end
$upscope $end


$scope module decode3_PISA $end
$var wire      1 !    instPacketValid_i  $end
$var wire     133 %    instPacket_i [132:0] $end
$var wire      1 1    decodedPacket0Valid_o  $end
$var wire     126 G!   decodedPacket0_o [125:0] $end
$var wire      1 0    decodedPacket1Valid_o  $end
$var wire     126 H!   decodedPacket1_o [125:0] $end
$var wire     64 I!   instruction [63:0] $end
$var wire     32 J!   pc [31:0] $end
$var wire     32 K!   preTargetAddr [31:0] $end
$var wire      4 L!   ctiTag [3:0] $end
$var wire      1 M!   preBranchDir  $end
$var wire     32 N!   opcode [31:0] $end
$var reg       1 O!   valid_0  $end
$var reg      32 P!   opcode_0 [31:0] $end
$var reg       7 Q!   instLogical1_0 [6:0] $end
$var reg       7 R!   instLogical2_0 [6:0] $end
$var reg       7 S!   instDest_0 [6:0] $end
$var reg       2 T!   instSrcHL_0 [1:0] $end
$var reg       2 U!   instDestHL_0 [1:0] $end
$var reg      17 V!   instImmediate_0 [16:0] $end
$var reg      32 W!   instTarget_0 [31:0] $end
$var reg       2 X!   instFU_0 [1:0] $end
$var reg       2 Y!   instldstSize_0 [1:0] $end
$var reg       1 Z!   instLoad_0  $end
$var reg       1 [!   instStore_0  $end
$var reg       1 \!   instbranch_0  $end
$var reg       1 ]!   valid_1  $end
$var reg      32 ^!   opcode_1 [31:0] $end
$var reg       7 _!   instLogical1_1 [6:0] $end
$var reg       7 `!   instLogical2_1 [6:0] $end
$var reg       7 a!   instDest_1 [6:0] $end
$var reg       2 b!   instSrcHL_1 [1:0] $end
$var reg       2 c!   instDestHL_1 [1:0] $end
$var reg      17 d!   instImmediate_1 [16:0] $end
$var reg      32 e!   instTarget_1 [31:0] $end
$var reg       2 f!   instFU_1 [1:0] $end
$var reg       2 g!   instldstSize_1 [1:0] $end
$var reg       1 h!   instLoad_1  $end
$var reg       1 i!   instStore_1  $end
$var reg       1 j!   instbranch_1  $end
$upscope $end


$scope begin SHIFTING_DECODED_INST $end
$var integer  32 k!   index  $end
$var integer  32 l!   i  $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
z!
bz "
bz #
bz $
bz %
z&
b0 '
bx (
bx )
bx *
bx +
bx ,
bx -
bx .
bx /
00
z1
02
z3
04
z5
06
z7
b0 8
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz 9
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz :
bz ;
bz <
bz =
bz >
z?
bz @
zA
bz B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
b0 I
b0 J
b0 K
0L
0M
0N
0O
b0 P
b0 Q
b0 R
b0 S
b0 T
b0 U
b0 V
b0 W
b0 X
b0 Y
0Z
0[
0\
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz ]
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz ^
bz _
bz `
bz a
bz b
zc
bz d
ze
bz f
b0 g
b0 h
b0 i
b0 j
b0 k
b0 l
b0 m
b0 n
b0 o
0p
0q
0r
0s
b0 t
b0 u
b0 v
b0 w
b0 x
b0 y
b0 z
b0 {
b0 |
b0 }
0~
0!!
0"!
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz #!
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz $!
bz %!
bz &!
bz '!
bz (!
z)!
bz *!
z+!
bz ,!
b0 -!
b0 .!
b0 /!
b0 0!
b0 1!
b0 2!
b0 3!
b0 4!
b0 5!
06!
07!
08!
09!
b0 :!
b0 ;!
b0 <!
b0 =!
b0 >!
b0 ?!
b0 @!
b0 A!
b0 B!
b0 C!
0D!
0E!
0F!
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz G!
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000zzzzz H!
bz I!
bz J!
bz K!
bz L!
zM!
bz N!
zO!
bz P!
b0 Q!
b0 R!
b0 S!
b0 T!
b0 U!
b0 V!
b0 W!
b0 X!
b0 Y!
0Z!
0[!
0\!
0]!
b0 ^!
b0 _!
b0 `!
b0 a!
b0 b!
b0 c!
b0 d!
b0 e!
b0 f!
b0 g!
0h!
0i!
0j!
b0 k!
b1000 l!
$end
#0
